WhatDidILike

IMPORT/EXPORT
    * The sync message wording is vague. How can a user know if it's done?
    
    * Test restarting a backup after cancelling it midway through.
        
    * I'd like to be able to use iCloud Drive to sync data across devices. As part of this, I'd want to observe/watch for conflicts. I haven't found notifications to allow for this. See https://stackoverflow.com/questions/47640039/nsnotification-nsmetadataquerydidupdate-getting-non-stop-notification-messages
        i.e., the following observers are not triggered on conflict situation:

            NotificationCenter.default.addObserver(forName: NSNotification.Name.UIDocumentStateChanged, object: nil, queue: nil) { notification in
                print("UIDocumentStateChanged.userInfo: \(String(describing: notification.userInfo))")
            }

            NotificationCenter.default.addObserver(forName: NSNotification.Name.NSMetadataQueryDidUpdate, object: nil, queue: nil) { notification in
                print("NSMetadataQueryDidUpdate.userInfo: \(String(describing: notification.userInfo))")
            }
    
    * An alternative to the background export method would be to trigger a place save when a place or one of its child objects gets updated. Would require an initial manual save/backup step to start. Would require being able to access the root Place object from any child. Would likely want to defer this until some seconds after a change was made to avoid multiple writes in a short interval.
    
    * Backgound (automatic) export: Looks like this is going to require an extensive overhaul of the way I'm dealing with Managed Object Context's for Core Data-- because a background thread requires its own MOC.
    
    * I just did a "simple" import: Imported a test of a single exported place. The import worked, but afterwards on the Setting screen, it says "1 of 1 place needs backup". No places should need exporting immed. after an import.
    
    * exportDirectories(in... needs to be smarter. In order for this to work incrementally, it ought to return the place folders that actually need restoring-- not all of them. So filter the full set by the places that have already been imported.
        This method has now been updated to: exportedPlaces(in...

    * When a place is imported, do I need to be concerned with image name conflicts? I.e., that a name for an image already exists in the large images directory? Suppose the following occurs: (1) The app is removed, (2) some places are created, and (3) a restore occurs. During (2), the images created will have new names assigned which are not necessarily different than those in the backup -- because the names are constructed to be different only from those in the largeImages directory. When a restore occurs in (3), if the names of images are the same as the new ones from (2), there will be a conflict.
    
        One way to handle the problem above would be to change the structure of the image folders from the simple largeImages folder to using sub-folders, similar to what I'm doing for the backup now. (This seems easier than having to do some kind of migration conversion).
        I'd need to then handle two different folder structure structure's for images as stored local to the app. I could handle this via a flag in the Place managed object. Any newly imported place could have its image stored local to the app in this manner, thus avoiding the name conflict issue.

    * When a place managed object is removed from the app data, any corresponding directory in the export directory also needs to be removed. Hmmm. I wonder if I ought to have an option in Settings that controls this in case of a "whoops".

    * DONE: What if someone (a) does a backup of their data, (b) changes the name of a place, and (c) backs up again. The place will currently save to a different folder. Need to change this-- find the previous place. Perhaps search for <Name>_id in the folder?
    
    * DONE: Add a README.txt to the exported data-- to inform user they ought not manually change these files (contents or names) if they ever want to do a recovery/restore. When restoring, need to exclude this file from from processing.
    
    * DONE: If the backup folder is changed, need to reset the lastExport field of all places-- to force export to the new backup location.
    
    * DONE: Consider using UUID's instead of id's for Place's. id's have the problem that: (1) if the app is removed, (2) some places created, and (3) a restore occurs we may have overlapping id's but different places.
    
    * DONE: Message after "Sync"-- Need an Alert: if there are files that need downloading-- it may take a while after you do this. I.e., don't do a Restore yet.

    * DONE: Some of the code in the Place+ImportExport.swift is more generic. e.g., folderInICloud, forceSync(for... Move it out.

    * DONE: Need a UI to enable user to control this import/export.

    * DONE: If I import all places, the text to the right of "Backup Now" reads "(415 of 415 places need backup)" which is completely mis-leading. No places need backup. For a place that is imported, I should set the "lastExport" date as now to disable this.
    
    * DONE: When I start using iCloud Drive on a simulator, I notice all of the WhatDidILike folders download, but none of their contents. If I use the Files app, contents are downloaded on demand. See also https://discussions.apple.com/thread/7102088
        https://stackoverflow.com/questions/60615931/
        https://stackoverflow.com/questions/33462352
        https://stackoverflow.com/questions/28672098
        
        More generally, see: https://developer.apple.com/library/archive/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html
    
    * DONE: Should add "creationDate" to core data Codable export/imports-- because otherwise losing some date data, which impacts suggestions.

    * DONE: Need to add in use of secure URL's for URL's from the URL picker-- I think it has to be used for all of those URL's.

    * DONE: During the manually triggered backup (from Settings), need to disable navigation using the tab bar-- so user doesn't change the places at the same time.

    * DONE: export(to... in app needs to change to using security accessor

    * DONE: Export: For a single place, write to files: (a) the Place (and substructure) JSON, and (b) the image files.

    * DONE: Import: For a single place, read from files: (a) the Place (and substructure) JSON, and (b) the image files.

    * DONE: Need a mechanism to compare two places for equality-- presumably something like a tree comparison.

    * DONE: On export, need to update lastExport property of a Place.

    * DONE: Exporting: Per place, need to save JSON of Place and sub-objects. And save files associated with place (i.e., image files).

    * DONE: Need id/key's for places. Simplest to just use integers. Need to do a migration to establish. And for subsequent place creation assign next highest. Need this for file or folder names when exporting to make names unique.

    * DONE: Need to have modification date on a Place updated when ever any of its children change. Or have a way to compute this. That modification date is to enable backing up of changed places to storage.


GENERAL
    * We need to sort the lists of a place before presenting. So that the order is consistent.
    * We should sort the locations of a place before presenting-- in some, say, user defined order. This is needed because otherwise with table views we run into problems with unordered sets.
