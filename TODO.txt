WhatDidILike

BUGS
    * On iOS 10.3.1, iPhone 7, when the sort/filter modal is presented it is too high-- too near the status bar.

    * DONE: "// TODO: Rename the image file in the export."
        Actually, not doing this. This was a cleanup after a collision, but as I've commented in the code, just a renaming of the image isn't enough, and it seems it would be better done as a garbage collection.
    
    * DONE: On a failed place import, locations need to be removed too. See Place import:
// TODO: `locations` will not have been removed as part of this removal/error handling.

    * DONE: In Dark mode, I cannot see the spinner-- which I believe comes up, when pressing the "Sync" button.

    * DONE: Dark mode: The horizontal lines in the Settings-- i.e., the separators between cells, are not consistent in their white color. The bottom two-- e.g., below the "Remove backup place ..." are brighter.

    * DONE: FIX: "Rely on some other method/process to clean up later. E.g., garbage collection to remove the now duplicated place in the export folders."
    
    * DONE: When typing into the Place Name field, after each character is typed, the cursor moves to the end of the field. It ought not to.
    

FILTERS
    * Select some number of (a) place categories, or (b) place lists to filter by. E.g., I want only Chinese restaurants.
    
    * Do I have a free text search for places for filtering?
    
OTHER
    * Add item sorting order to UI in Settings. When there are many items within a place, need some way to manage them. Sorting by name seems the most obvious, but might also want sorting by last modification date. Need increasing/decreasing sort orders too.
    
    * We need to sort the lists of a place before presenting. So that the order is consistent.
    
    * We should sort the locations of a place before presenting-- in some, say, user defined order. This is needed because otherwise with table views we run into problems with unordered sets.
    
    * Place merging: Suppose someone has Place representing Restaurant1 with some data, and then creates another place not seeing Restaurant1 in their data. So now they have two places, both representing Restaurant1. It would be nice to have a merge tool to combine both of these into one.
    
    * Similar to place merging, it would be nice to have some mechanism when creating a place asking the user if the place they are creating is a duplicate. Could do this by: 1) comparing names of places-- after they finish entering the new place name, and/or by 2) the latitude/longitude of locations.


IMPORT/EXPORT

    * Currently, my plan is to skip place restores when the place is already present in core data. However, I may want to give a minimal level of support to syncing data across devices, I should check the dates of (a) the Core Data place versus (b) the place in the iCloud backup. If the iCloud backup has a more recent change, a restore seems needed.

    * The sync message wording is vague. How can a user know if it's done?
        Getting updates from iCloud download:
        https://stackoverflow.com/questions/26622062
        https://pinkstone.co.uk/how-to-detect-file-changes-in-your-ubiquitous-icloud-folder/
        https://stackoverflow.com/questions/28672575
        It looks like we can't monitor changes to iCloud Drive. See https://stackoverflow.com/questions/28672575/icloud-drive-documents-not-included-in-nsmetadataquery-results
        One strategy here may be to periodically (say, once every second or two) determine the size of the files in the export directory. If this size doesn't change for a while we might assume that the sync is done (though, no change would be observed if there was no network connection too). See https://stackoverflow.com/questions/2188469/how-can-i-calculate-the-size-of-a-folder
        
    * We may be able to monitor changes in the file system, even if we can't monitor changes in iCloud Drive directly:
        https://developer.apple.com/library/archive/technotes/tn2336/_index.html
    https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileCoordinators/FileCoordinators.html#//apple_ref/doc/uid/TP40010672-CH11-SW1
        
    * I'd like to be able to use iCloud Drive to sync data across devices. As part of this, I'd want to observe/watch for conflicts. I haven't found notifications to allow for this. See https://stackoverflow.com/questions/47640039/nsnotification-nsmetadataquerydidupdate-getting-non-stop-notification-messages
        i.e., the following observers are not triggered on conflict situation:

            NotificationCenter.default.addObserver(forName: NSNotification.Name.UIDocumentStateChanged, object: nil, queue: nil) { notification in
                print("UIDocumentStateChanged.userInfo: \(String(describing: notification.userInfo))")
            }

            NotificationCenter.default.addObserver(forName: NSNotification.Name.NSMetadataQueryDidUpdate, object: nil, queue: nil) { notification in
                print("NSMetadataQueryDidUpdate.userInfo: \(String(describing: notification.userInfo))")
            }
                
    * An alternative to the background export method would be to trigger a place save when a place or one of its child objects gets updated. Would require an initial manual save/backup step to start. Would require being able to access the root Place object from any child. ALSO: Would likely want to defer this until some seconds after a change was made to avoid multiple writes in a short interval.
        
    * Backgound (automatic) export: Looks like this is going to require an extensive overhaul of the way I'm dealing with Managed Object Context's for Core Data-- because a background thread requires its own MOC.
        HOWEVER: If this operation was done on the main thread, while the entire app is in the background, this could resolve the issue. I.e., I'd not have to overhaul the way I'm dealing with Core Data. I'd have to enable some kind of background task operation.

    * What about "export garbage collection"? 1) Get a list of all folders in the export directory and their corresponding Place UUID's. 2) Do an export, keeping track of the UUID's of the Places thus exported. 3) Garbage collection then consists of a) determining the places from 1) that were not overwritten, and b) removing those from the export folder.
        The purpose of this garbage collection is to deal with the consequences of a UUID collision prevention technique. It would also have the effect (wanted or unwanted?) of removing Places from a backup that had not been removed before, but had been removed before from Core Data.
        Could add to this Image file garbage collection. Making sure that the only image files within an exported place correspond to the one's in Core Data for the place. My current image file collision avoidance technique can result in duplicate image files in an export directory. e.g., in an place export directory there would be imageFile1 and imageFile2, both would be the same image, but only one would be referenced from the place.json file.

    * Is there a way of enabling iCloud backup of the raw Core Data and images from the app? i.e., in place backup? So we don't have to have this doubling of storage space? (Note that my current mechanism still may have its usefulness-- it's more user friendly/user accessible). See:
        https://developer.apple.com/icloud/icloud-drive/
        https://stackoverflow.com/questions/26295176/icloud-documents-not-visible?rq=1
        https://stackoverflow.com/questions/26865643/icloud-drive-folder
        https://stackoverflow.com/questions/30385940/
        https://medium.com/@guilhermerambo/synchronizing-data-with-cloudkit-94c6246a3fda
        https://forums.developer.apple.com/thread/101683
        https://stackoverflow.com/questions/27817690/how-to-store-big-image-in-cloudkit
        https://developer.apple.com/documentation/foundation/nsfilemanager/ 1411653-urlforubiquitycontaineridentifie
        
        NOTE: One advantage of the way I currently have things setup is that it is conceptually possible to upload the backup files to other services such as Dropbox, or Google Drive. They just have to have "selectable" folders.
        
    * What happens on a sync if the folder is not there? Log message? App crash?
        This is relevant b/c it can happen if a user deletes data from iCloud.

    * Should we try to estimate, prior to a backup, if there is sufficient storage space available and warn the user if there is not?
        See https://stackoverflow.com/questions/5712527
        
    * Currently cannot backup to Google Drive or Dropbox. Those entries, when scoped for selecting folders, are grayed out in the UIDocumentPickerViewController. See also
        https://stackoverflow.com/questions/58262986
        https://www.dropboxforum.com/t5/Dropbox-API-Support-Feedback/iOS-Document-Picker-greyed-out/td-p/374480
    
    * Social media integrations:
        (a) Export info from a place to Yelp
        (b) To Facebook
        (c) To Instagram
        (d) To Pinterest
    
    * Should I write an additional html file into the place export folders that would let a human view the place data? I.e., format the place/location info into a nice web page?
    
    * DONE: Add docs: Duration of a backup to cloud. It may take some time to actually complete a backup to the cloud.
    
    * DONE: The date formats in the place.json file aren't very human readable. E.g.,
        "modificationDate": 609569555.55133605,
        "creationDate": 387243594.25358099,
        Perhaps they ought to be?
    
    * DONE: When I merely navigate to a place in the UI, the place gets marked in Settings as needing backup.
        Cause: The rateValueChangeCallback was effectively updating the modificationDate of the rating despite the fact that the rating was not changed by the user. This was because the `rateValueChangeCallback` got called even during setup.
        
    * DONE: I think changes to sorting attributes are causing places to be marked as needing backup. I just sorted places by their distance from me, and all places are again needing backup.
    
    * DONE: Suppose a backup runs out of storage space. Will the entire backup fail at that point or will it keep trying? I think it should give up.
        I think it will fail when it runs out, and give up. It should fail on a single export(place: Place) and then fail entirely.
        
    * DONE: What if there's a failure trying to access the Backup/Restore Folder? Should I reset it to empty? I'm just getting this now in a failure to access securityScopedExportFolder(). In this case it is because I've actually, in development, changed the iCloud container.
        Seems like a rare edge case, where the user could recover by clearing the folder. Not going to worry about for now.
    
    * DONE: We don't have a specific named folder in iCloud Drive. E.g., Petunia has
        iCloud~biz~SpasticMuffin~Petunia
    for WhatDidILike, so far it is:
        com~apple~CloudDocs
    Where did I see this?
        One place-- in the UI in the Backup/Restore Folder in the WhatDidILike settings
            Hmmm. Not actually sure if this is true-- I'm still seeing the com~apple~CloudDocs despite the fact that I changed the container name.
        
    * DONE: Should put a spinner on the sync: It can take appreciable time for just the sync itself to happen. E.g., 5 or so seconds with my full data set on an iOS simulator.
    
    * DONE: Once finished the "Restore Now", give a final Alert indicating how many places restored if it was successful.
    
    * DONE: If I do the following:
        a) Backup the place data to, say, iCloud
        b) Go to iCloud.com and remove that data.
        c) Force a sync (e.g., in the simulator: Debug -> "Trigger iCloud Sync").
        d) In Settings, try a "backup" again. It says "No places need exporting".
        This happens because the decision to export is based purely a date for the place in Core Data. We should also include checking for the exported data. If it's not in the export folder, or if a check of its exported data indicates its stale, a re-export ought to happen.
    
    * DONE: Run a test:
        a) Do an export to iCloud
        b) Wait for upload to iCloud to complete.
        a) Remove data from iCloud
        b) When does the data, if at all, start to be removed from the device folder for iCloud? Or do you have to do an explicit sync?
            -> In the simulator, it's not being removed, even after I do a sync.
        LOOKS LIKE YOU HAVE to use Debug -> "Trigger iCloud Sync" in the Simulator. See also https://stackoverflow.com/questions/7793139/using-icloud-in-ios-simulator/19710768

    * DONE: What is happening currently with an export when I run across a UUID that is in the export folder, but that is not in Core Data? (Note that this can currently occur because of the "Remove backup place when place removed?" setting, and could also occur due to UUID collision issues.). Does the export fail?
        ANSWER: Places are exported from Core Data, not based on the places in the export folder. So, based on Core Data, this is not an issue. BUT: What about the following scenario:
        a) Have the "No" setting for removing backup.
        b) Remove a place.
        c) Create a new place. It happens to have, due to a UUID collision, the same UUID as the place removed in b).
        d) Suppose the user does an export.
        e) Then an import.
        f) Now, we'll have two places with the same UUID.
        
        What can we do:
        i) When importing, check for Place UUID collision. Are we already doing this?
            I.e., does the place being imported have the same UUID as one in Core Data?
        WE have this covered already. Do we have a test case for it?

    * DONE: Add to the help information for the backup, a link to the iCloud.com online-- to show users they can access the backup there if they backup to iCloud.

    * DONE: For at least iCloud backup, do we need to tell the user that this will double the data space required for the app on the device? E.g., for my app, I've got about 1GB in images. With iCloud backup, that goes up to about 2GB.
    
    * DONE: If I release WhatDidILike without the capability to use iCloud Drive to sync data across devices I need to at least alert users to the fact that this is not supported. e.g., to give some help text in Settings.
    
    * DONE: For non-iCloud backups should we warn the user that a backup that doesn't store off the device is not all that useful? e.g., if the device were to be lost or if you broke your device, you'd lose the backup.
    
    * DONE: For pre-UUID places, what happens on a restore? Do the places get assigned a UUID? How is a comparison carried out with those places?
        - NOTE:
            a) Only a v2.2 or greater app can do a backup.
            b) That app will have had its places updated to have UUIDs.
            c) So all places that are exported will get get exported with a UUID.
    
    * DONE: I just did a restore from the WhatDidILike.beta iCloud folder. The restore seemed to work correctly, but I got an Alert! "Comparison failed: placeNotRemoved". The last log message in the console was: exportedPlace: Optional("Boulder Beer The Pub"); coreDataPlace: Optional("Boulder Beer The Pub") [compareAll() in PlaceExporter.swift, line 285]
        --> It's interesting to note that this is a place with 2 locations.

    * DONE: I want a debug-build-only UI tool that enables a user to compare all data in a backup to places currently in Core Data. It would need to have a progress UI (Alert) that indicates it's progress. After doing a restore for a place-- which would need to bypass any UUID collision mechanisms, it would test the two places for equality.

    * DONE: Currently on a Place UUID collision when creating a new place, I cause the code to fail. I don't have to do this. I could keep attempting generating new UUIDs until I get a distinct one.
    
    * DONE: When a place is imported, do I need to be concerned with image name conflicts? I.e., that a name for an image already exists in the large images directory? Suppose the following occurs: (1) The app is removed and re-installed, (2) some places are created, and (3) a restore occurs. During (2), the images created will have new names assigned which are not necessarily different than those in the backup -- because the names are constructed to be different only from those in the largeImages directory. When a restore occurs in (3), if the names of images are the same as the new ones from (2), there will be a conflict.
    
        One way to handle the problem above would be to change the structure of the image folders from the simple largeImages folder to using sub-folders, similar to what I'm doing for the backup now. (This seems easier than having to do some kind of migration conversion).
        I'd need to then handle two different folder structure structure's for images as stored local to the app. I could handle this via a flag in the Place managed object. Any newly imported place could have its images stored local to the app in this manner, thus avoiding the name conflict issue.
        A different strategy for resolving this is to use UUID's to form the unique part of the image filenames. To make doubly sure of a lack of collisions I could use the same kind of strategy I'm using for UUID's for places when creating a new place. I.e., to check to make sure the UUID for the image doesn't already exist in Core Data. An advantage of this change is that it is more localized. In the other strategy, I'd need to put multiple handling cases in multiple places in the code. E.g., Instead of names like:
                WhatDidILike.qQ18P.jpg
            we'd have names like:
                WhatDidILike.EA698671-D62D-46BA-94A1-C40C3DCFC7E1.jpg
    
    * DONE: iOS uses RFC 4122 v4 UUID's-- these are purely random numbers. So, there is some small chance of having a collision. This applies to both the Place UUID's I have and the image UUID's, in terms of the backup/restore process. This is for the same reasoning as used above: (1) The app is installed, used, and a backup is made. (2) The app is removed and re-installed, (3) some new places are created, and (4) a restore occurs. During (3), the images and/or places created will have id's/names assigned based on UUID's. There is a non-zero chance of a collision with UUID's that are in the backup from (1). When a restore occurs in (4), if the names of images/id's for places are the same as the new ones from (1), there will be a conflict. While this is not a high-risk (e.g., medical) application it would be good if there was some simple code for resolving conflicts.
    
    * DONE: Need collision avoidance on UUID's for images.
        Now using uuid's to form image file names -- to avoid naming conflicts on a restore

    * [Cannot reproduce] I just did a "simple" import: Imported a test of a single exported place. The import worked, but afterwards on the Setting screen, it says "1 of 1 place needs backup". No places should need exporting immed. after an import.

    * DONE: exportDirectories(in... needs to be smarter. In order for this to work incrementally, in the case of restoring, it ought to return the place folders that actually need restoring-- not all of them. So filter the full set by the places that have already been imported.
        This method has now been updated to: exportedPlaces(in...
        
        Hmmm... May not want to actually change the exportedPlaces(... method but rather, in the start(usingSecurityScopedFolder... method that uses it for import/restore purposes, may want to just filter the results returned from exportedPlaces(in... so as to eliminate any that have already been imported.
        Perhaps in this case, inform the user of the number of places that will not be re-imported. i.e., the number of places with export data from exportedPlaces(... that will not be imported.
    
    * DONE: Disable the "remove backup place control" in Settings UI if there is no backup folder. This switch has no meaning unless there is a backup folder.

    * DONE: When a place managed object is removed from the app data, any corresponding directory in the export directory also needs to be removed. Hmmm. I wonder if I ought to have an option in Settings that controls this in case of a "whoops".

    * DONE: What if someone (a) does a backup of their data, (b) changes the name of a place, and (c) backs up again. The place will currently save to a different folder. Need to change this-- find the previous place. Perhaps search for <Name>_id in the folder?
    
    * DONE: Add a README.txt to the exported data-- to inform user they ought not manually change these files (contents or names) if they ever want to do a recovery/restore. When restoring, need to exclude this file from from processing.
    
    * DONE: If the backup folder is changed, need to reset the lastExport field of all places-- to force export to the new backup location.
    
    * DONE: Consider using UUID's instead of id's for Place's. id's have the problem that: (1) if the app is removed, (2) some places created, and (3) a restore occurs we may have overlapping id's but different places.
    
    * DONE: Message after "Sync"-- Need an Alert: if there are files that need downloading-- it may take a while after you do this. I.e., don't do a Restore yet.

    * DONE: Some of the code in the Place+ImportExport.swift is more generic. e.g., folderInICloud, forceSync(for... Move it out.

    * DONE: Need a UI to enable user to control this import/export.

    * DONE: If I import all places, the text to the right of "Backup Now" reads "(415 of 415 places need backup)" which is completely mis-leading. No places need backup. For a place that is imported, I should set the "lastExport" date as now to disable this.
    
    * DONE: When I start using iCloud Drive on a simulator, I notice all of the WhatDidILike folders download, but none of their contents. If I use the Files app, contents are downloaded on demand. See also https://discussions.apple.com/thread/7102088
        https://stackoverflow.com/questions/60615931/
        https://stackoverflow.com/questions/33462352
        https://stackoverflow.com/questions/28672098
        
        More generally, see: https://developer.apple.com/library/archive/documentation/General/Conceptual/iCloudDesignGuide/Chapters/Introduction.html
    
    * DONE: Should add "creationDate" to core data Codable export/imports-- because otherwise losing some date data, which impacts suggestions.

    * DONE: Need to add in use of secure URL's for URL's from the URL picker-- I think it has to be used for all of those URL's.

    * DONE: During the manually triggered backup (from Settings), need to disable navigation using the tab bar-- so user doesn't change the places at the same time.

    * DONE: export(to... in app needs to change to using security accessor

    * DONE: Export: For a single place, write to files: (a) the Place (and substructure) JSON, and (b) the image files.

    * DONE: Import: For a single place, read from files: (a) the Place (and substructure) JSON, and (b) the image files.

    * DONE: Need a mechanism to compare two places for equality-- presumably something like a tree comparison.

    * DONE: On export, need to update lastExport property of a Place.

    * DONE: Exporting: Per place, need to save JSON of Place and sub-objects. And save files associated with place (i.e., image files).

    * DONE: Need id/key's for places. Simplest to just use integers. Need to do a migration to establish. And for subsequent place creation assign next highest. Need this for file or folder names when exporting to make names unique.

    * DONE: Need to have modification date on a Place updated when ever any of its children change. Or have a way to compute this. That modification date is to enable backing up of changed places to storage.


